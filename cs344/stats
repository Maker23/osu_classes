#!/bin/sh -f
#
# stats script in *bash*  MWAHAHAHAHA!
# Shoshana Abrass, CS344-400  Spring 2016 did I mention MWAUAHAHA!!!!!!
#

#=========== 
# Set up variables
datafile="datafile.$$"
tmpfile="tmpfile.$$"
use_columns=0

DEBUG=1
IODEBUG=1
MATHDEBUG=1
unset DEBUG
unset IODEBUG
unset MATHDEBUG

#=========== =========== =========== ===========
# Parse the command line arguments
USAGE='USAGE: '" $0 "'{-rows|-cols} [input_file]'"
\nWHICH:\tcomputes the average and median of a row, or column, of numbers
\n\tread from input_file"

if [ $# -lt 1 ]; then
	>&2 /bin/echo -e $USAGE
	exit 1
fi

# Based on handy code snippet from assignment page
if [[ $1 == -r* ]]; then
	echo "calculating row stats";
elif [[ $1 == -c* ]]; then
	echo "calculating column stats";
	use_columns=1
else
	>&2 echo "ERROR: One of {-rows|-cols} is required"
	>&2 /bin/echo -e $USAGE
	exit 1
fi

#===========
# If there's no filename argument, read from stdin
# and store the results in a file
# Based on handy code snippet from assignment page
if [ $# -eq 1 ]; then
	echo "Enter lines of numbers, end with <ctrl>-D: "
	cat > "$datafile"
#elif [ $# -eq 2 ]; then
else
	if [[ $2 == -r* || $2 == -c* ]]; then
		>&2 echo "ERROR: Only one of {-rows|-cols} can be specified"
		>&2 /bin/echo -e $USAGE
		exit 1
	else
		datafile=$2
	fi
fi

#=========== =========== =========== ===========
# Now read the entire file into array Line[]
#
if [ ! -e ${datafile} ]; then
	>&2 echo "File ${datafile} does not exist; exiting...."
	exit 1
elif [ ! -r ${datafile} ] ; then
	>&2 echo "File ${datafile} is not readable; exiting...."
	exit 1
fi
# [[ -n "$line" ]] construct thanks to stackoverflow
# captures the last line of input even if it ends with something other than EOL
i=0
while read -r -a line || [[ -n "$line" ]]; do
	if [ -v IODEBUG ]; then echo "DBG: Text read from file: ${line[*]}"; fi
	Line[i]=${line[*]}
	for word in ${Line[i][*]}; do
		if [ -v IODEBUG ] ; then echo "DBG: This is a word: ${word}"; fi
		echo -n ""
	done
	let i=i+1
done < "$datafile"

#=========== =========== =========== ===========
# Do some math
i=0
j=0
if [ $use_columns -gt 0 ]; then
	#===========
	# COLUMNS
		echo -n ""
else
	#===========
	# ROWS
	row=${Line[i]}
	while [ -n "${row}" ]; do
		n=0
		sum=0
		avg=0
		cat /dev/null > ${tmpfile}

	
		#===========
		# Row Average
		for item in ${row}; do
			echo ${item} >> ${tmpfile}
			# TODO: check for non-numeric data
			let sum=sum+${item}
			let n=n+1
		done
		let avg=sum/n
		let rem=sum%n
		haf=`echo "scale=1; ${n}/2" | bc` 

		roundup=`echo "scale=1; (${rem} >= ${haf})" | bc`
		if [ -v MATHDEBUG ] ; then 
			echo "DBG: sum = ${sum}" 
			echo "DBG: rem = ${rem}" 
			echo "DBG: haf = ${haf}" 
			echo "DBG: roundup = ${roundup}" 
		fi
		if [ ${roundup} -eq 1 ] ; then
			let avg=avg+1
		fi


		#===========
		# Row Median
		# TODO: Sort and median
		# Thank you stackoverflow for this "tr" command
		sortrow=`sort ${tmpfile} | tr '\n' ' '`
		if [ -v MATHDEBUG ] ; then echo "DBG: sorted list is ${sortrow}"; fi
		if [ -v MATHDEBUG ] ; then echo -n "DGB: ${sortrow} has " `echo ${sortrow} | wc -w` " numbers"; echo ""; fi
		let odd=n%2
		if [ ${odd} -eq 0 ] ; then
			# even number of elements
			median="NYN"
		else
			# odd number of elements
			let mid_element=(n/2)+1
			median=`echo ${sortrow} | cut -d" " -f ${mid_element}`
		fi

		echo "Row = ${row}, average = ${avg}, median = ${median}"

		#===========
		# Process the next line
		let i=i+1
		row=${Line[i]}
	done
fi


#===========
# Remove any temporary files on exit, interrupt/hup/term
# Manpage for trap is distinctly pathetic; this is based on 
# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_12_02.html

trap "{ /bin/rm -f datafile.$$ ${tmpfile}; }"  EXIT SIGTERM SIGINT SIGHUP

exit 0
